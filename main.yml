---
- name: This will harden RHOSP services per the Red Hat OSP hardening guide
  hosts: all
  become: yes
  vars:
    osp_services:
      - ironic
      - containers
      - gnocchi
      - octavia
      - neutron
      - ec2api
      - nova
      - ironic-inspector
      - keystone
      - glance
      - mistral


  tasks:
     - name: Get running container ID
       command: "docker ps -q"
       register: running_containers

     - name: Get current config from running container to disable validation of self-signed certificates
       #command: "docker cp \"{{ item }}\":/etc/nova/api-paste.ini /var/lib/config-data/puppet-generated/nova/etc/nova/"
       command: "docker cp nova_conductor:/etc/nova/api-paste.ini /var/lib/config-data/puppet-generated/nova/etc/nova/"
       ignore_errors: true
       tags: self_certs

     - name: To disable validation of self-signed certificates for host
       lineinfile:
         path: /etc/nova/api-paste.ini
         line: "insecure=False"
         insertafter: "[filter:authtoken]"
       tags: self_certs

     - name: To disable validation of self-signed certificates for containers
       lineinfile:
         path: /var/lib/config-data/puppet-generated/nova/etc/nova/api-paste.ini
         line: "insecure=False"
         insertafter: "[filter:authtoken]"
         tags: self_certs

     - name: creating the httpd folder to be used in the next step
       file:
         path: /var/lib/config-data/puppet-generated/httpd/etc/conf/httpd/
         state: directory
         mode: 0755
       tags: hsts

     - name: Get /etc/httpd/conf/httpd.conf from running container to enable of HSTS
       command: "docker cp \"{{ item }}\":/etc/httpd/conf/httpd.conf /var/lib/config-data/puppet-generated/httpd/etc/httpd/conf/"
       with_items: "{{ running_containers.stdout_lines }}"
       ignore_errors: true
       tags: hsts

     - name: Enable HSTS for host
       lineinfile:
         path: /etc/httpd/conf/httpd.conf
         line: "LoadModule headers_module modules/mod_headers.so"
       tags: hsts

     - name: Enable HSTS for containers
       lineinfile:
         path: /var/lib/config-data/puppet-generated/httpd/etc/conf/httpd/httpd.conf
         line: "LoadModule headers_module modules/mod_headers.so"
       ignore_errors: true
       tags: hsts

     - name: creating the httpd folder to be used in the next step
       file:
         path: /var/lib/config-data/puppet-generated/httpd/etc/httpd/conf.d/
         state: directory
         mode: 0755
         tags: hsts

     - name: Get /etc/httpd/conf.d/ssl.conf from running container to enable of HSTS
       command: "docker cp \"{{ item }}\":/etc/httpd/conf.d/ssl.conf /var/lib/config-data/puppet-generated/httpd/etc/httpd/conf.d/"
       with_items: "{{ running_containers.stdout_lines }}"
       ignore_errors: true
       tags: hsts

     - name: Enable HSTS for host PT2
       lineinfile:
         path: /etc/httpd/conf.d/ssl.conf
         line: "Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\""
         insertafter: "<VirtualHost _default_:443>"
       ignore_errors: true
       tags: hsts

     - name: Enable HSTS for containers PT2
       blockinfile:
         path: /var/lib/config-data/puppet-generated/httpd/etc/httpd/conf.d/ssl.conf
         content: |
           <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteCond %{HTTPS} off
              RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
           </IfModule>"
         insertafter: "Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\""
       ignore_errors: true
       tags: hsts

     - name: Creating the default policy.json for each service
       command: "/bin/oslopolicy-policy-generator --namespace {{ item }} --output-file /var/lib/config-data/puppet-generated/{{ item }}/etc/{{ item }}/policy.json"
       with_items: "{{ osp_services }}"
       ignore_errors: true
       tags: domain_auth

     - name: Get /etc/keystone/keystone.conf from running container to Domain specific auth
       command: "docker cp \"{{ item }}\":/etc/keystone/keystone.conf /var/lib/config-data/puppet-generated/keystone/etc/keystone/"
       with_items: "{{ running_containers.stdout_lines }}"
       ignore_errors: true
       tags: domain_auth

     - name: Enable Domain specific auth for hosts
       blockinfile:
         path: /etc/keystone/keystone.conf
         content: |
           domain_specific_drivers_enabled = True
           domain_config_dir = /etc/keystone/domains
         insertafter: "#domain_specific_drivers_enabled = false"
       ignore_errors: true
       tags: domain_auth

     - name: Enable Domain specific auth for containers
       blockinfile:
         path: /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf
         content: |
           domain_specific_drivers_enabled = True
           domain_config_dir = /etc/keystone/domains
         insertafter: "#domain_specific_drivers_enabled = false"
       ignore_errors: true
       tags: domain_auth

     - name: Stopping KSM service on compute nodes
       service:
          name: "{{ item }}"
          state: stopped
       when: "'Compute' in group_names"
       with_items:
          - ksmtuned
          - ksm
       tags: disable_ksm

     - name: disable KSM service on compute nodes
       service:
          name: "{{ item }}"
          enabled: no
       when: "'Compute' in group_names"
       with_items:
          - ksmtuned
          - ksm
       tags: disable_ksm

     - name: Delete all PageKSM in the systems
       command: "echo 2 >/sys/kernel/mm/ksm/run"
       when: "'Compute' in group_names"
       tags: disable_ksm

     #- name: Get /etc/cinder/cinder.conf from running container for volume wiping
    #   command: "docker cp \"{{ item }}\":/etc/cinder/cinder.conf /var/lib/config-data/puppet-generated/cinder/etc/cinder/"
    #   with_items: "{{ running_containers.stdout_lines }}"
    #   ignore_errors: true
    #   tags: volume_wiping

     - name: Enable volume wiping and shredding for hosts
       blockinfile:
         path: /etc/cinder/cinder.conf
         content: |
           lvm_type = thin
           volume_clear = shred
         insertbefore: "# The maximum number of items that a collection resource returns in a single"
       ignore_errors: true
       tags: volume_wiping

     - name: Enable volume wiping and shredding for containers
       blockinfile:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         content: |
           lvm_type = thin
           volume_clear = shred
         insertbefore: "# The maximum number of items that a collection resource returns in a single"
       ignore_errors: true
       tags: volume_wiping

     - name: Setting user and group file permissions for cinder for hosts
       file:
         path: "{{ item }}"
         owner: root
         group: cinder
         mode: 640
       with_items:
         - /etc/cinder/cinder.conf
         - /etc/cinder/api-paste.ini
         - /etc/cinder/policy.json
         - /etc/cinder/rootwrap.conf
       ignore_errors: true
       tags: cinder_perms

     - name: Setting user and group file permissions for cinder for containers
       file:
         path: "{{ item }}"
         owner: root
         group: cinder
         mode: 640
       with_items:
         - /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         - /var/lib/config-data/puppet-generated/cinder/etc/cinder/api-paste.ini
         - /var/lib/config-data/puppet-generated/cinder/etc/cinder/policy.json
         - /var/lib/config-data/puppet-generated/cinder/etc/cinder/rootwrap.conf
       ignore_errors: true
       tags: cinder_perms

     - name: Enable keystone cinder for hosts
       lineinfile:
         path: /etc/cinder/cinder.conf
         line: auth_strategy = keystone
         insertafter: "#auth_strategy = keystone"
       ignore_errors: true
       tags: cinder_keystone

     - name: Enable keystone cinder for containers
       lineinfile:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         line: auth_strategy = keystone
         insertafter: "#auth_strategy = keystone"
       ignore_errors: true
       tags: cinder_keystone

     - name: Enable TLS auth for cinder
       replace:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         regexp: 'auth_uri=http:'
         replace: 'auth_uri=https:'
         backup: yes
       ignore_errors: true
       tags: cinder_tls

     - name: Ensure block storage uses TLS
       replace:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         regexp: 'glance_api_servers=http:'
         replace: 'glance_api_servers=https:'
         backup: yes
       ignore_errors: true
       tags: cinder_tls

     - name: Enable glance_api_insecure to false for hosts
       lineinfile:
         path: /etc/cinder/cinder.conf
         line: glance_api_insecure = false
         insertafter: "#glance_api_insecure = false"
       ignore_errors: true
       tags: cinder_tls

     - name: Enable nas_secure_file_permissions to false for hosts
       lineinfile:
         path: /etc/cinder/cinder.conf
         line: nas_secure_file_permissions = auto
         insertafter: "#nas_secure_file_permissions = auto"
       ignore_errors: true
       tags: cinder_tls


     - name: Enable glance_api_insecure to false for containers
       lineinfile:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         line: glance_api_insecure = false
         insertafter: "#glance_api_insecure = false"
       ignore_errors: true
       tags: cinder_tls

     - name: Enable nas_secure_file_permissions to false for containers
       lineinfile:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         line: nas_secure_file_permissions = auto
         insertafter: "#nas_secure_file_permissions = auto"
       ignore_errors: true
       tags: cinder_tls

     - name: Enable max_request_body_size for hosts
       lineinfile:
         path: /etc/cinder/cinder.conf
         line: max_request_body_size = 114688
         insertafter: "#max_request_body_size = 114688"
       ignore_errors: true
       tags: cinder_tls

     - name: Enable max_request_body_size for hosts
       lineinfile:
         path: /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
         line: max_request_body_size = 114688
         insertafter: "#max_request_body_size = 114688"
       ignore_errors: true
       tags: cinder_tls
